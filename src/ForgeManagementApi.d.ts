import { ForgeNotificationBus } from "./ForgeNotificationBus";
import * as ForgeCommands from "./ForgeCommands";
export declare class ForgeManagementApi {
    KEY: string;
    FORGE_URL: string;
    notificationBus: ForgeNotificationBus | undefined;
    constructor(options: {
        authKey: string;
        url: string;
    });
    post(cmd: ForgeCommands.CommandBase | ForgeCommands.CommandBase[], waitTimeout?: number): any;
    autoWaitCommandNotification(notificationBus: ForgeNotificationBus): void;
    get(path: string, questyStringObject?: any): Promise<any>;
    getEvents(bucketId: string, options: any): Promise<any>;
    getCommits(bucketId: string, options: any): Promise<any>;
    getEventsByAggregateId(bucketId: string, aggregateId: any, options: any): Promise<any>;
    getStories(version: string, options: any): Promise<any>;
    getStory(version: string, translationId: any): Promise<any>;
    getStoryByCultureSlug(version: string, culture: string, slug: string): Promise<any>;
    getPhotos(version: string, options: any): Promise<any>;
    getPhoto(version: string, translationId: any): Promise<any>;
    getPhotoByCultureSlug(version: string, culture: string, slug: string): Promise<any>;
    getPhotoTranslations(version: string, entityId: any): Promise<any>;
    getTags(version: string, options: any): Promise<any>;
    getTag(version: string, translationId: any): Promise<any>;
    getTagByCultureSlug(version: string, culture: string, slug: string): Promise<any>;
    getTagTranslations(version: string, entityId: any): Promise<any>;
    getDocuments(version: string, options: any): Promise<any>;
    getDocument(version: string, translationId: any): Promise<any>;
    getDocumentByCultureSlug(version: string, culture: string, slug: string): Promise<any>;
    getDocumentTranslations(version: string, entityId: any): Promise<any>;
    getSelections(version: string, options: any): Promise<any>;
    getSelection(version: string, translationId: any): Promise<any>;
    getSelectionByCultureSlug(version: string, culture: string, slug: string): Promise<any>;
    getSelectionTranslations(version: string, entityId: any): Promise<any>;
    getAlbum(version: string, translationId: any): Promise<any>;
    getAlbumByCultureSlug(version: string, culture: string, slug: string): Promise<any>;
    getAlbumTranslations(version: string, entityId: any): Promise<any>;
    getAlbums(version: string, options: any): Promise<any>;
    getCustomEntity(entityCode: string, version: string, translationId: any): Promise<any>;
    getCustomEntityTranslations(entityCode: string, version: string, entityId: any): Promise<any>;
    getCustomEntityBySlug(entityCode: string, version: string, culture: string, slug: string): Promise<any>;
    getCustomEntities(entityCode: string, version: string, options: any): Promise<any>;
    getCheckpoints(bucketId: string): Promise<any>;
    getPage(pageId: any): Promise<any>;
    uuid(): any;
    randomSlug(): any;
}
